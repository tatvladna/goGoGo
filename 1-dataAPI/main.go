package main

import (
    "1-dataAPI/logger"
    "1-dataAPI/config"
    "1-dataAPI/db"
    "1-dataAPI/utils"
    _ "github.com/lib/pq" // —Å—é–¥–∞ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä–∞ postgresql
    "sync"
    "runtime"
    "fmt"
)

func main() {
    logger.Init()


    maxCores := 2
    runtime.GOMAXPROCS(maxCores)
    logger.Info.Println("üçÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: üçÄ", runtime.GOMAXPROCS(0))

    // –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cfg := config.LoadConfig()

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    psqlInfo := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
    cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName)

    // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    dbConn, err := db.ConnectDB(psqlInfo)
    if err != nil {
        logger.Error.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
    }
    defer dbConn.Close()

    logger.Info.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")


    currencies := [4]string{"EUR", "USD", "CNY", "BTC"}
    ratesChan := make(chan utils.CurrencyRate, len(currencies))  // –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª

    // WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
    // —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Ä–∞–Ω—å—à–µ, —á–µ–º –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –∑–∞–∫–æ–Ω—á–∞—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
    var wg sync.WaitGroup

    // –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã
    for _, currency := range currencies {
        wg.Add(1) // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
        // –∞–Ω–æ–Ω–∏–º–Ω–∞—è
        // —Ü–∏–∫–ª –Ω–µ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        go func(currency string) {
            defer wg.Done() // —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ—Ä—É—Ç–∏–Ω—ã
            rate, err := utils.GetCurrencyRate(currency)
            if err != nil {
                logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–ª—è %s: %v\n", currency, err)
                return
            }
            ratesChan <- utils.CurrencyRate{Currency: currency, Rate: rate}
        }(currency) // –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
    }

    // –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
    wg.Wait() // –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, –ø–æ–∫–∞ —Å—á–µ—Ç—á–∏–∫ –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é.
    close(ratesChan) // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω

    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤ –±–¥
    for rate := range ratesChan {
        err := utils.SaveRateToDB(dbConn, rate.Currency, rate.Rate)
        if err != nil {
            logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–ª—è %s: %v\n", rate.Currency, err)
            continue
        }
        logger.Info.Printf("–ö—É—Ä—Å %s: %.4f\n", rate.Currency, rate.Rate)
    }
}