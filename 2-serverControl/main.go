package main

import (
    "fmt"
    "2-serverControl/config"
    "2-serverControl/db"
    "2-serverControl/logger"
    "2-serverControl/utils"
    "time"
    _ "github.com/lib/pq"
	"runtime" // –≥–æ—Ä—É—Ç–∏–Ω—ã –≤ runtime
    "strings"
    "sync"
)


func main() {
    logger.Init()

    maxCores := 2
    runtime.GOMAXPROCS(maxCores)
    logger.Info.Println("üçÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: üçÄ", runtime.GOMAXPROCS(0))


	cfg := config.LoadConfig()

	database, err := db.NewDB(cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName)
	if err != nil {
		logger.Error.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	} else {
        logger.Info.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    }
	defer database.Close()

	sites := []string{
		"https://telegram.org",
		"https://youtube.com",
		"https://github.com",
		"https://google.com",
		"https://yandex.ru",
		"https://stepik.org",
		"https://vk.com",
	}

    // –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∏–Ω–≥–æ–≤
    ch := make(chan string)
    var wg sync.WaitGroup

    // –∑–∞–ø—É—Å–∫ –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∞–π—Ç–∞ –≤ –æ–¥–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
    for _, site := range sites {
        wg.Add(1)
        // –≥–æ—Ä—É—Ç–∏–Ω–∞
        go func(site string) {
            defer wg.Done()
            ticker := time.NewTicker(30 * time.Second)
            defer ticker.Stop()

            for {
                select {
                case <- ticker.C:
                    // –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ –∏–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥
                    result, err := utils.PingSite(site)
                    if err != nil {
                        result = fmt.Sprintf("%s: %v", site, err)
                    }

                    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
                    ch <- result
                }
            }
        }(site)
    }

    // –≤—Å–µ–≥–æ –∂–¥–µ–º 3 –º–∏–Ω—É—Ç—ã
    timeout := time.After(3 * time.Minute)

    // —Å–æ–∑–¥–∞–¥–∏–º –µ—â–µ –æ–¥–Ω—É –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É—Ç–∞—Ç–æ–≤
    // –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∑—è—Ç –ø–∏–Ω–≥, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î
    // –Ω–æ –ø–∏–Ω–≥–∏ –º–æ–≥—É—Ç –∫–æ–ø–∏—Ç—å—Å—è –≤ result
    for {
        select {
        case result := <-ch:
            logger.Info.Println("result: ", result)
            index := strings.LastIndex(result, ":")
            url := result[:index]
            timeStr := strings.TrimSpace(result[index+1:])
            err := database.SavePingResult(url, timeStr)
            if err != nil {
                logger.Info.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
            } else {
                logger.Info.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %s", result)
            }
        case <-timeout: // –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
            logger.Info.Println("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            return
        }
    }
    wg.Wait()
    close(ch) // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
}
